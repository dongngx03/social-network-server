// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection poolin
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Gender {
  MALE
  FEMALE
}

enum Status_Friend {
  PENDING
  ACCEPTED
  REJECTED
}

enum Status_Like_Post {
  TRUE
  FALSE
}

enum TypeMessage {
  TEXT
  IMAGE
}

// bảng chứ id websoket
model websoket {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  soketId   String   @unique
  create_At DateTime @default(now())
}

model User {
  id              Int              @id @default(autoincrement())
  idAuth          String           @unique
  fistname        String
  lastname        String
  phone           String
  email           String           @unique
  birtday         DateTime
  nickname        String           @unique
  gender          Gender
  avatar          String
  imagebackground String
  // bảng lời mời kết bạn 
  Friend_request1 Friend_request[] @relation("User1Request")
  Friend_request2 Friend_request[] @relation("User2Request")

  // bảng post 
  posts Post[]

  // bảng like 
  likes Like_post[]

  // bảng comment 
  comments Comment[]

  // bảng like comment 
  likeComments Like_comment[]

  // bảng message 
  message1 Message[] @relation("senderMessage")
  message2 Message[] @relation("receiverMessage")

  // bảng đang theo dõi 
  following_1 Following[] @relation("Following1")
  following_2 Following[] @relation("Following2")
  // websoket
  websoket    websoket[]

  // thông báo 
  notifycation Notifycation[]
}

// lời mời kết bạn 
model Friend_request {
  id       Int           @id @default(autoincrement())
  sender   User?         @relation("User1Request", fields: [sourceId], references: [id])
  sourceId Int?
  receiver User?         @relation("User2Request", fields: [targetId], references: [id])
  targetId Int?
  status   Status_Friend
}

// người theo dõi 
model Following {
  id        Int      @id @default(autoincrement())
  sender    User?    @relation("Following1", fields: [sourceId], references: [id], onDelete: Cascade)
  sourceId  Int?
  reciever  User?    @relation("Following2", fields: [targetId], references: [id], onDelete: Cascade)
  targetId  Int?
  create_At DateTime @default(now())
}

// tin 
model Post {
  id          Int      @id @default(autoincrement())
  user        User?    @relation(fields: [sourceId], references: [id])
  sourceId    Int?
  postContent String
  post_At     DateTime @default(now())

  // bảng like 
  likes Like_post[]

  // bảng ảnh 
  images Image_post[]

  // comment 
  comments Comment[]
}

// thích bài viết 
model Like_post {
  id       Int              @id @default(autoincrement())
  post     Post?            @relation(fields: [postId], references: [id])
  postId   Int?
  user     User?            @relation(fields: [sourceId], references: [id])
  sourceId Int?
  status   Status_Like_Post
}

// ảnh của bài viết 
model Image_post {
  id         Int      @id @default(autoincrement())
  imageUrl   String
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int?
  created_At DateTime @default(now())
}

// bình luận bài viết 
model Comment {
  id              Int    @id @default(autoincrement())
  post            Post?  @relation(fields: [postId], references: [id])
  postId          Int?
  user            User?  @relation(fields: [sourceId], references: [id])
  sourceId        Int?
  commentContent  String
  parentCommentId Int?   @default(0)

  // like comment 
  comments Like_comment[]
}

// like bình luận 
model Like_comment {
  id        Int              @id @default(autoincrement())
  comment   Comment?         @relation(fields: [commentId], references: [id])
  commentId Int?
  user      User?            @relation(fields: [sourceId], references: [id])
  sourceId  Int?
  status    Status_Like_Post
}

// tin nhắn 
model Message {
  id             Int         @id @default(autoincrement())
  sender         User?       @relation("senderMessage", fields: [senderId], references: [id])
  senderId       Int?
  receiver       User?       @relation("receiverMessage", fields: [receiverId], references: [id])
  receiverId     Int?
  messageContent String
  sent_At        DateTime    @default(now())
  read           Boolean     @default(false)
  type           TypeMessage
}

// thông báo 
model Notifycation {
  id       Int    @id @default(autoincrement())
  targetId User?  @relation(fields: [user_id], references: [id])
  user_id  Int?
  content  String
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}
